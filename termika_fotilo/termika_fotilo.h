

// Displayanschluesse:
uint8_t CS_  = 10;
uint8_t DC_  = 9;
uint8_t RST_ = 8;  

// Farb-Spektrum
const int8_t MINTEMP = -5;
const uint8_t MAXTEMP = 30;

const uint8_t ZOOM = 8;         // Vergroesserungfaktor
float Weight[ZOOM+1][ZOOM+1];


// Allgemein
// u = 1/(Z*Z);
// const float Weight[ZOOM+1][ZOOM+1] = {
//   {(Z-0)*(Z-0), (Z-0)*(Z-1), (Z-0)*(Z-2), (Z-0)*(Z-3),..., (Z-0)*1, (Z-0)*0},
//   {(Z-1)*(Z-0), (Z-1)*(Z-1), (Z-1)*(Z-2), (Z-1)*(Z-3),..., (Z-1)*1, (Z-1)*0},
//   {(Z-2)*(Z-0), (Z-2)*(Z-1), (Z-2)*(Z-2), (Z-2)*(Z-3),..., (Z-2)*1, (Z-2)*0},
//   {...},
//   {...},
//   {...},
//   {1*(Z-0),     1*(Z-1),     1*(Z-2),     1*(Z-3)    ,..., 1*1,     1*0},
//   {0*(Z-0),     0*(Z-1),     0*(Z-2),     0*(Z-3)    ,..., 0*1,     0*0}} multipliziert mit u;


void StartScreen(void);
void OutAmbientTemp(void);
void HSVtoRGB(uint8_t &, uint8_t &, uint8_t &, float);
void OutTempField(void);
float LinInterpol (float, float, uint8_t, uint8_t, uint8_t);

const uint16_t colormap[] = {
  0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800,
  0x7820, 0x7820, 0x7820, 0x7820, 0x7820, 0x7820, 0x7820, 0x7820, 0x7840,
  0x7840, 0x7840, 0x7840, 0x7840, 0x7840, 0x7840, 0x7840, 0x7860, 0x7860,
  0x7860, 0x7860, 0x7860, 0x7860, 0x7860, 0x7860, 0x7880, 0x7880, 0x7880,
  0x7880, 0x7880, 0x7880, 0x7880, 0x7880, 0x78A0, 0x78A0, 0x78A0, 0x78A0,
  0x78A0, 0x78A0, 0x78A0, 0x78A0, 0x78C0, 0x78C0, 0x78C0, 0x78C0, 0x78C0,
  0x78C0, 0x78C0, 0x78C0, 0x78E0, 0x78E0, 0x78E0, 0x78E0, 0x78E0, 0x78E0,
  0x78E0, 0x78E0, 0x7900, 0x7900, 0x7900, 0x7900, 0x7900, 0x7900, 0x7900,
  0x7900, 0x7920, 0x7920, 0x7920, 0x7920, 0x7920, 0x7920, 0x7920, 0x7920,
  0x7940, 0x7940, 0x7940, 0x7940, 0x7940, 0x7940, 0x7940, 0x7940, 0x7960,
  0x7960, 0x7960, 0x7960, 0x7960, 0x7960, 0x7960, 0x7960, 0x7980, 0x7980,
  0x7980, 0x7980, 0x7980, 0x7980, 0x7980, 0x7980, 0x79A0, 0x79A0, 0x79A0,
  0x79A0, 0x79A0, 0x79A0, 0x79A0, 0x79A0, 0x79C0, 0x79C0, 0x79C0, 0x79C0,
  0x79C0, 0x79C0, 0x79C0, 0x79C0, 0x79E0, 0x79E0, 0x79E0, 0x79E0, 0x79E0,
  0x79E0, 0x79E0, 0x79E0, 0x7A00, 0x7A00, 0x7A00, 0x7A00, 0x7A00, 0x7A00,
  0x7A00, 0x7A00, 0x7A20, 0x7A20, 0x7A20, 0x7A20, 0x7A20, 0x7A20, 0x7A20,
  0x7A20, 0x7A40, 0x7A40, 0x7A40, 0x7A40, 0x7A40, 0x7A40, 0x7A40, 0x7A40,
  0x7A60, 0x7A60, 0x7A60, 0x7A60, 0x7A60, 0x7A60, 0x7A60, 0x7A60, 0x7A80,
  0x7A80, 0x7A80, 0x7A80, 0x7A80, 0x7A80, 0x7A80, 0x7A80, 0x7AA0, 0x7AA0,
  0x7AA0, 0x7AA0, 0x7AA0, 0x7AA0, 0x7AA0, 0x7AA0, 0x7AC0, 0x7AC0, 0x7AC0,
  0x7AC0, 0x7AC0, 0x7AC0, 0x7AC0, 0x7AC0, 0x7AE0, 0x7AE0, 0x7AE0, 0x7AE0,
  0x7AE0, 0x7AE0, 0x7AE0, 0x7AE0, 0x7B00, 0x7B00, 0x7B00, 0x7B00, 0x7B00,
  0x7B00, 0x7B00, 0x7B00, 0x7B20, 0x7B20, 0x7B20, 0x7B20, 0x7B20, 0x7B20,
  0x7B20, 0x7B20, 0x7B40, 0x7B40, 0x7B40, 0x7B40, 0x7B40, 0x7B40, 0x7B40,
  0x7B40, 0x7B60, 0x7B60, 0x7B60, 0x7B60, 0x7B60, 0x7B60, 0x7B60, 0x7B60,
  0x7B80, 0x7B80, 0x7B80, 0x7B80, 0x7B80, 0x7B80, 0x7B80, 0x7B80, 0x7BA0,
  0x7BA0, 0x7BA0, 0x7BA0, 0x7BA0, 0x7BA0, 0x7BA0, 0x7BA0, 0x7BC0, 0x7BC0,
  0x7BC0, 0x7BC0, 0x7BC0, 0x7BC0, 0x7BC0, 0x7BC0, 0x7BE0, 0x7BE0, 0x7BE0,
  0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0,
  0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0, 0x7BE0,
  0x7BE0, 0x7BE0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0,
  0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0, 0x73E0,
  0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0,
  0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x6BE0, 0x63E0, 0x63E0,
  0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x63E0,
  0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x63E0, 0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0,
  0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0, 0x5BE0,
  0x5BE0, 0x5BE0, 0x5BE0, 0x53E0, 0x53E0, 0x53E0, 0x53E0, 0x53E0, 0x53E0
};



